C51 COMPILER V9.50a   MAIN                                                                 01/08/2023 01:59:32 PAGE 1   


C51 COMPILER V9.50a, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\OUTPUT\main.obj
COMPILER INVOKED BY: D:\Keil\C51\C51\BIN\C51.EXE USER\main.c BROWSE INCDIR(.\USER;.\BSP\LED;.\BSP\DELAY;.\BSP\UART;.\BSP
                    -\BUTTON;.\BSP\LCD) DEBUG OBJECTEXTEND PRINT(.\LISITING\main.lst) TABS(2) OBJECT(.\OUTPUT\main.obj)

line level    source

   1          #include<reg51.h>
   2          #include<stdio.h>
   3          #include<stdlib.h>
   4          #include"led.h"
   5          #include"delay.h"
   6          #include"uart.h"
   7          #include"button.h"
   8          
   9          //这是head的移动量，值为-1，0，1
  10          char head_add_x, head_add_y;
  11          //定义蛇的长度length,length-1也就是分数score
  12          u8 length;
  13          u8 score;
  14          //游戏初始速度为1，速度为1-8档
  15          u8 speed;
  16          //存储果实的横纵坐标
  17          u8 food_x, food_y;
  18          //分别存储蛇身的横坐标、总坐标
  19          char snake_x[20] = {0};
  20          char snake_y[20] = {0};
  21          
  22          //记录游戏是否结束
  23          u8 game_flag;
  24          
  25          //LED点阵横坐标、纵坐标的亮灭控制，从左下角开始为第一个
  26          u8 led_row[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};
  27          u8 led_col[8] = {0x7f, 0xbf, 0xdf, 0xef, 0xf7, 0xfb, 0xfd, 0xfe};
  28          
  29          
  30          //串口接收到的值
  31          u8 re;
  32          
  33          /*
  34          贪吃蛇移动函数
  35          输入：蛇身数组的指针，蛇长
  36          输出：移动后的蛇身数组
  37          */
  38          void snake_move()
  39          {
  40   1          u8 i;
  41   1          for (i = length; i > 0; i--)
  42   1          {
  43   2              snake_x[i] = snake_x[i - 1];
  44   2              snake_y[i] = snake_y[i - 1];
  45   2          }
  46   1          //根据贪吃蛇的游戏原理，当坐标为-1时，变为7，当坐标为8时，变为0
  47   1          snake_x[0] = (snake_x[0] + head_add_x + 8) % 8;
  48   1          snake_y[0] = (snake_y[0] + head_add_y + 8) % 8;
  49   1      }
  50          
  51          /*
  52          游戏初始化函数
  53          输入：无
  54          输出：速度、蛇身长度、LED点阵等回到初始状态，给蛇一个随机的初始方向
C51 COMPILER V9.50a   MAIN                                                                 01/08/2023 01:59:32 PAGE 2   

  55          */
  56          void snake_init()
  57          {
  58   1        unsigned char d;
  59   1        length = 1;
  60   1        speed = 1;
  61   1        game_flag = 1;
  62   1        row(led_row[0]);
  63   1        col(led_col[0]);
  64   1        
  65   1        d = rand() % 2;
  66   1        switch (d)
  67   1        {
  68   2        case 0:
  69   2          head_add_x = 1;
  70   2          head_add_y = 0;
  71   2          break;
  72   2        case 1:
  73   2          head_add_x = 0;
  74   2          head_add_y = 1;
  75   2          break;
  76   2        }
  77   1      }
  78          
  79          /*
  80          随机生成果实函数
  81          输入：无
  82          输出：生成一个随机位置的果实
  83          */
  84          void food()
  85          {
  86   1        u8 flag = 0;
  87   1        u8 i;
  88   1        while (!flag)
  89   1        {
  90   2          food_x = rand() % 8;
  91   2          food_y = rand() % 8;
  92   2          flag = 1;
  93   2          
  94   2          for (i = 0; i < length; i++)
  95   2          {
  96   3            if (snake_x[i] == food_x && snake_y[i] == food_y)
  97   3            {
  98   4              flag = 0;
  99   4              break;
 100   4            }
 101   3          }
 102   2        }
 103   1      }
 104          
 105          /*
 106          显示蛇身函数
 107          */
 108          void led_snake()
 109          {
 110   1        u8 i;
 111   1      
 112   1        for (i = 0; i < length; i++)
 113   1        {
 114   2          row(led_row[snake_x[i]]);
 115   2          col(led_col[snake_y[i]]);
 116   2        }
C51 COMPILER V9.50a   MAIN                                                                 01/08/2023 01:59:32 PAGE 3   

 117   1        row(led_row[food_x]);
 118   1        col(led_col[food_y]);
 119   1      
 120   1      }
 121          
 122          
 123          /*
 124          判断是否碰撞函数
 125          */
 126          void snake_collide()
 127          {
 128   1        u8 i;
 129   1        for (i = 1; i < length; i++)
 130   1        {
 131   2          if (snake_x[0] == snake_x[i] && snake_y[0] ==snake_y[i])
 132   2          {
 133   3            game_flag = 0;
 134   3          }
 135   2        }
 136   1        if (snake_x[0] == food_x && snake_y[0] == food_y)
 137   1        {
 138   2          length++;
 139   2          food();
 140   2        }
 141   1      }
 142          
 143          
 144          
 145          void main()
 146          {
 147   1        u8 temp = 0;
 148   1        snake_init();
 149   1        uart_init(0xFA);
 150   1        food();
 151   1        while (1)
 152   1        {
 153   2          while (game_flag)
 154   2          {
 155   3            led_snake();
 156   3            snake_move();
 157   3            led_snake();
 158   3            snake_collide();
 159   3            led_snake();
 160   3            delay_ms(50 * (11 - speed));
 161   3            re = SBUF;
 162   3            if (re == 0x04)
 163   3            {
 164   4              head_add_x = 0;
 165   4              head_add_y = 1;
 166   4            }
 167   3            else if (re == 0x03)
 168   3            {
 169   4              head_add_x = 0;
 170   4              head_add_y = -1;
 171   4            }
 172   3            else if (re == 0x02)
 173   3            {
 174   4              head_add_x = -1;
 175   4              head_add_y = 0;
 176   4            }
 177   3            else if (re == 0x01)
 178   3            {
C51 COMPILER V9.50a   MAIN                                                                 01/08/2023 01:59:32 PAGE 4   

 179   4              head_add_x = 1;
 180   4              head_add_y = 0;
 181   4            }
 182   3            score = length - 1;
 183   3            if (score != temp)
 184   3              uart_send(0x99);
 185   3              temp = score;
 186   3          }
 187   2          length = 1;
 188   2          
 189   2        }
 190   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    425    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     65       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
